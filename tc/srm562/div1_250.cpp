#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long lli;
class PastingPaintingDivOne {
    public:

        int idx(char C){
            if(C=='R'){
                return 0;
            }else if(C=='G'){
                return 1;
            }else if(C=='B'){
                return 2;
            }
            return 3;
        }

        vector <long long> countColors(vector <string> clipboard, int T) {
            int m = clipboard.size(), n = clipboard[0].size();
            long long int cnt[4] = {0L, 0L, 0L, 0L};
            for(int i=1; i<n; i++){
                cnt[idx(clipboard[0][i])] += 1;
            }
            for(int i=0; i<m; i++){
                cnt[idx(clipboard[i][0])] += 1;
            }

            lli after[4] = {0L, 0L, 0L, 0L};
            for(int i=1; i<n; i++){
                if(idx(clipboard[0][i]) == 3 && m>=1 && i+1<n){
                    int tmp_idx = idx(clipboard[1][i+1]);
                    after[tmp_idx] += 1;
                }
            }


            for(int i=0; i<4; i++){
                cout<<"after = "<<after[i]<<endl; 
                after[i] = after[i] * (lli(T-1));
            }

            for(int i=0; i<clipboard.size(); i++){
                cout<<clipboard[i]<<endl;
            }

            for(int i = 1; i<m; i++){
                for(int j=1; j<n; j++){
                    int index = idx(clipboard[i][j]);
                    if(index == 3){
                        cnt[idx(clipboard[i+1][j+1])] += 1;
                    }else{
                        cnt[index] += 1;
                    }
                }
            }
            vector<long long int> ans;
            for(int i=0; i<3; i++){
                ans.push_back(cnt[i]+after[i]);
            }
            return ans;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, vector <long long> p2) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << p1;
    cout << "]" << endl;
    PastingPaintingDivOne *obj;
    vector <long long> answer;
    obj = new PastingPaintingDivOne();
    clock_t startTime = clock();
    answer = obj->countColors(p0, p1);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << "{";
        for (int i = 0; int(p2.size()) > i; ++i) {
            if (i > 0) {
                cout << ",";
            }
            cout << p2[i];
        }
        cout << "}" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "{";
    for (int i = 0; int(answer.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << answer[i];
    }
    cout << "}" << endl;
    if (hasAnswer) {
        if (answer.size() != p2.size()) {
            res = false;
        } else {
            for (int i = 0; int(answer.size()) > i; ++i) {
                if (answer[i] != p2[i]) {
                    res = false;
                }
            }
        }
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;

    vector <string> p0;
    int p1;
    vector <long long> p2;
    /*
    {
        // ----- test 0 -----
        string t0[] = {"..G","R..","BG."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 3;
        long long t2[] = {3ll,4ll,3ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        string t0[] = {"R...","....","....","...R"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 2;
        long long t2[] = {4ll,0ll,0ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        string t0[] = {"RGB"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 100000;
        long long t2[] = {100000ll,100000ll,100000ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        string t0[] = {"."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000000000;
        long long t2[] = {0ll,0ll,0ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        string t0[] = {"RB.",".G."};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 100;
        long long t2[] = {100ll,1ll,100ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
        // ------------------
    }
    */
    {
        // ----- test 5 -----
        string t0[] = {"..........G..........",".........G.G.........","........G...G........",".......G.....G.......","......G..B.B..G......",".....G...B.B...G.....","....G...........G....","...G...R.....R...G...","..G.....RRRRRR....G..",".G..........RR.....G.","GGGGGGGGGGGGGGGGGGGGG"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = 1000000000;
        long long t2[] = {2000000018ll,17000000048ll,2000000005ll};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
        // ------------------
    }

    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
